syntax = "proto3";

message GetUserRequest {
  oneof identifyer {
    int64 user_id = 1;
    string username = 2;
  }
}

message GetNewMessagesRequest {
}

message NewMessageEvent {
  Message message = 1;
}

message Message {
  int64 id = 2;
  optional string text = 1;
  optional string raw_text = 9;
  optional Photo photo = 8;
  oneof sender {
    User sender_user = 3;
    Channel sender_channel = 4;
  }
  oneof chat {
    User chat_user = 5;
    Channel chat_channel = 6;
    Chat chat_chat = 7;
  }
  optional Forward forward = 10;
}

message Forward {
  int64 chat_id = 1;
}

message User {
  int64 id = 1;
  bool bot = 2;
  bool is_self = 3;

  string first_name = 4;
  optional string last_name = 5;
  optional string username = 6;
}

message Chat {
  int64 id = 1;
  string title = 2;
  int32 participants_count = 3;
}

message Channel {
  int64 id = 1;
  string title = 2;
}

message Photo {
  int64 id = 1;
}

message FullUser {
  int64 id = 4;
  optional string first_name = 1;
  optional string last_name = 2;
  optional string username = 3;
}

message ForwardRequest {
  int64 message_id = 1;
  oneof from {
    int64 from_user_id = 2;
    int64 from_chat_id = 3;
    int64 from_channel_id = 4;
  }
  oneof to {
    int64 to_user_id = 5;
    int64 to_chat_id = 6;
    int64 to_channel_id = 7;
  }
}

message ForwardResponse { }

message SendMessageRequest {
  oneof to {
    string to_username = 1;
    int64 to_user_id = 2;
    int64 to_chat_id = 3;
  }
  optional string text = 4;
}

message SendMessageResponse { }

message SearchRequest {
  string query = 1;
  optional int32 limit = 2;
}

message SearchResponse {
  repeated FoundedChat chats = 1;
}

message FoundedChat {
  int64 id = 1;
  string title = 2;
  int32 participants_count = 3;
}

message CreateChatRequest {
  repeated int64 user_ids = 1;
  string title = 2;
}

message CreateChatResponse {
  Chat chat = 1;
}

message GetHistoryRequest {
  oneof peer {
    int64 user_id = 1;
    string username = 2;
  }
  optional int32 offset_id = 3;
  optional int32 offset_date = 4;
  optional int32 add_offset = 5;
  optional int32 limit = 6;
  optional int32 max_id = 7;
  optional int32 min_id = 8;
  optional int64 hash = 9;
}

message GetHistoryResponse {
  repeated Message messages = 1;
}

message GetMessagesRequest {
  oneof peer {
    int64 user_id = 1;
    string username = 2;
  }
  optional int32 offset_id = 3;
  optional int32 add_offset = 4;
  optional int32 limit = 5;
}

message GetMessagesResponse {
  repeated Message messages = 1;
}

service TelegramClient {
  rpc GetUser(GetUserRequest) returns (FullUser);
  rpc GetNewMessages(GetNewMessagesRequest) returns (stream NewMessageEvent);
  rpc Forward(ForwardRequest) returns (ForwardResponse);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc CreateChat(CreateChatRequest) returns (CreateChatResponse);
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
}